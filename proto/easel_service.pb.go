// Code generated by protoc-gen-go.
// source: easel_service.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	easel_service.proto

It has these top-level messages:
	NewEaselRequest
	NewEaselResponse
	DeleteEaselRequest
	DeleteEaselResponse
	NewPaletteRequest
	NewPaletteResponse
	DeletePaletteRequest
	DeletePaletteResponse
	VertexAttribute
	UniformAttribute
	ArrayBuffer
	UpdatePaletteRequest
	UpdatePaletteResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type NewEaselRequest struct {
	EaselId string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
}

func (m *NewEaselRequest) Reset()                    { *m = NewEaselRequest{} }
func (m *NewEaselRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewEaselRequest) ProtoMessage()               {}
func (*NewEaselRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewEaselRequest) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

type NewEaselResponse struct {
	EaselId string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
}

func (m *NewEaselResponse) Reset()                    { *m = NewEaselResponse{} }
func (m *NewEaselResponse) String() string            { return proto1.CompactTextString(m) }
func (*NewEaselResponse) ProtoMessage()               {}
func (*NewEaselResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewEaselResponse) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

type DeleteEaselRequest struct {
	EaselId string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
}

func (m *DeleteEaselRequest) Reset()                    { *m = DeleteEaselRequest{} }
func (m *DeleteEaselRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteEaselRequest) ProtoMessage()               {}
func (*DeleteEaselRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteEaselRequest) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

type DeleteEaselResponse struct {
}

func (m *DeleteEaselResponse) Reset()                    { *m = DeleteEaselResponse{} }
func (m *DeleteEaselResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeleteEaselResponse) ProtoMessage()               {}
func (*DeleteEaselResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NewPaletteRequest struct {
	EaselId string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
}

func (m *NewPaletteRequest) Reset()                    { *m = NewPaletteRequest{} }
func (m *NewPaletteRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewPaletteRequest) ProtoMessage()               {}
func (*NewPaletteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewPaletteRequest) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

type NewPaletteResponse struct {
	EaselId   string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
	PaletteId string `protobuf:"bytes,2,opt,name=palette_id,json=paletteId" json:"palette_id,omitempty"`
}

func (m *NewPaletteResponse) Reset()                    { *m = NewPaletteResponse{} }
func (m *NewPaletteResponse) String() string            { return proto1.CompactTextString(m) }
func (*NewPaletteResponse) ProtoMessage()               {}
func (*NewPaletteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NewPaletteResponse) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

func (m *NewPaletteResponse) GetPaletteId() string {
	if m != nil {
		return m.PaletteId
	}
	return ""
}

type DeletePaletteRequest struct {
	EaselId   string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
	PaletteId string `protobuf:"bytes,2,opt,name=palette_id,json=paletteId" json:"palette_id,omitempty"`
}

func (m *DeletePaletteRequest) Reset()                    { *m = DeletePaletteRequest{} }
func (m *DeletePaletteRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeletePaletteRequest) ProtoMessage()               {}
func (*DeletePaletteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeletePaletteRequest) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

func (m *DeletePaletteRequest) GetPaletteId() string {
	if m != nil {
		return m.PaletteId
	}
	return ""
}

type DeletePaletteResponse struct {
}

func (m *DeletePaletteResponse) Reset()                    { *m = DeletePaletteResponse{} }
func (m *DeletePaletteResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeletePaletteResponse) ProtoMessage()               {}
func (*DeletePaletteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type VertexAttribute struct {
}

func (m *VertexAttribute) Reset()                    { *m = VertexAttribute{} }
func (m *VertexAttribute) String() string            { return proto1.CompactTextString(m) }
func (*VertexAttribute) ProtoMessage()               {}
func (*VertexAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type UniformAttribute struct {
}

func (m *UniformAttribute) Reset()                    { *m = UniformAttribute{} }
func (m *UniformAttribute) String() string            { return proto1.CompactTextString(m) }
func (*UniformAttribute) ProtoMessage()               {}
func (*UniformAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ArrayBuffer struct {
	Name string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data []float32 `protobuf:"fixed32,2,rep,packed,name=data" json:"data,omitempty"`
}

func (m *ArrayBuffer) Reset()                    { *m = ArrayBuffer{} }
func (m *ArrayBuffer) String() string            { return proto1.CompactTextString(m) }
func (*ArrayBuffer) ProtoMessage()               {}
func (*ArrayBuffer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ArrayBuffer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArrayBuffer) GetData() []float32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdatePaletteRequest struct {
	EaselId   string `protobuf:"bytes,1,opt,name=easel_id,json=easelId" json:"easel_id,omitempty"`
	PaletteId string `protobuf:"bytes,2,opt,name=palette_id,json=paletteId" json:"palette_id,omitempty"`
	// Shader
	VertexShader   string `protobuf:"bytes,3,opt,name=vertex_shader,json=vertexShader" json:"vertex_shader,omitempty"`
	FragmentShader string `protobuf:"bytes,4,opt,name=fragment_shader,json=fragmentShader" json:"fragment_shader,omitempty"`
	// VertexBuffer
	Buffers []*ArrayBuffer `protobuf:"bytes,5,rep,name=buffers" json:"buffers,omitempty"`
	// VertexElementBuffer
	Indecies []int32 `protobuf:"varint,6,rep,packed,name=indecies" json:"indecies,omitempty"`
	// VertexAttributes
	VertexArrtibutes []*VertexAttribute `protobuf:"bytes,7,rep,name=vertex_arrtibutes,json=vertexArrtibutes" json:"vertex_arrtibutes,omitempty"`
	// UniformAttributes
	UniformArrtibute []*UniformAttribute `protobuf:"bytes,8,rep,name=uniform_arrtibute,json=uniformArrtibute" json:"uniform_arrtibute,omitempty"`
}

func (m *UpdatePaletteRequest) Reset()                    { *m = UpdatePaletteRequest{} }
func (m *UpdatePaletteRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdatePaletteRequest) ProtoMessage()               {}
func (*UpdatePaletteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdatePaletteRequest) GetEaselId() string {
	if m != nil {
		return m.EaselId
	}
	return ""
}

func (m *UpdatePaletteRequest) GetPaletteId() string {
	if m != nil {
		return m.PaletteId
	}
	return ""
}

func (m *UpdatePaletteRequest) GetVertexShader() string {
	if m != nil {
		return m.VertexShader
	}
	return ""
}

func (m *UpdatePaletteRequest) GetFragmentShader() string {
	if m != nil {
		return m.FragmentShader
	}
	return ""
}

func (m *UpdatePaletteRequest) GetBuffers() []*ArrayBuffer {
	if m != nil {
		return m.Buffers
	}
	return nil
}

func (m *UpdatePaletteRequest) GetIndecies() []int32 {
	if m != nil {
		return m.Indecies
	}
	return nil
}

func (m *UpdatePaletteRequest) GetVertexArrtibutes() []*VertexAttribute {
	if m != nil {
		return m.VertexArrtibutes
	}
	return nil
}

func (m *UpdatePaletteRequest) GetUniformArrtibute() []*UniformAttribute {
	if m != nil {
		return m.UniformArrtibute
	}
	return nil
}

type UpdatePaletteResponse struct {
}

func (m *UpdatePaletteResponse) Reset()                    { *m = UpdatePaletteResponse{} }
func (m *UpdatePaletteResponse) String() string            { return proto1.CompactTextString(m) }
func (*UpdatePaletteResponse) ProtoMessage()               {}
func (*UpdatePaletteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto1.RegisterType((*NewEaselRequest)(nil), "proto.NewEaselRequest")
	proto1.RegisterType((*NewEaselResponse)(nil), "proto.NewEaselResponse")
	proto1.RegisterType((*DeleteEaselRequest)(nil), "proto.DeleteEaselRequest")
	proto1.RegisterType((*DeleteEaselResponse)(nil), "proto.DeleteEaselResponse")
	proto1.RegisterType((*NewPaletteRequest)(nil), "proto.NewPaletteRequest")
	proto1.RegisterType((*NewPaletteResponse)(nil), "proto.NewPaletteResponse")
	proto1.RegisterType((*DeletePaletteRequest)(nil), "proto.DeletePaletteRequest")
	proto1.RegisterType((*DeletePaletteResponse)(nil), "proto.DeletePaletteResponse")
	proto1.RegisterType((*VertexAttribute)(nil), "proto.VertexAttribute")
	proto1.RegisterType((*UniformAttribute)(nil), "proto.UniformAttribute")
	proto1.RegisterType((*ArrayBuffer)(nil), "proto.ArrayBuffer")
	proto1.RegisterType((*UpdatePaletteRequest)(nil), "proto.UpdatePaletteRequest")
	proto1.RegisterType((*UpdatePaletteResponse)(nil), "proto.UpdatePaletteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EaselService service

type EaselServiceClient interface {
	NewEasel(ctx context.Context, in *NewEaselRequest, opts ...grpc.CallOption) (*NewEaselResponse, error)
	DeleteEasel(ctx context.Context, in *DeleteEaselRequest, opts ...grpc.CallOption) (*DeleteEaselResponse, error)
	NewPalette(ctx context.Context, in *NewPaletteRequest, opts ...grpc.CallOption) (*NewPaletteResponse, error)
	DeletePalette(ctx context.Context, in *DeletePaletteRequest, opts ...grpc.CallOption) (*DeletePaletteResponse, error)
	UpdatePalette(ctx context.Context, in *UpdatePaletteRequest, opts ...grpc.CallOption) (*UpdatePaletteResponse, error)
}

type easelServiceClient struct {
	cc *grpc.ClientConn
}

func NewEaselServiceClient(cc *grpc.ClientConn) EaselServiceClient {
	return &easelServiceClient{cc}
}

func (c *easelServiceClient) NewEasel(ctx context.Context, in *NewEaselRequest, opts ...grpc.CallOption) (*NewEaselResponse, error) {
	out := new(NewEaselResponse)
	err := grpc.Invoke(ctx, "/proto.EaselService/NewEasel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easelServiceClient) DeleteEasel(ctx context.Context, in *DeleteEaselRequest, opts ...grpc.CallOption) (*DeleteEaselResponse, error) {
	out := new(DeleteEaselResponse)
	err := grpc.Invoke(ctx, "/proto.EaselService/DeleteEasel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easelServiceClient) NewPalette(ctx context.Context, in *NewPaletteRequest, opts ...grpc.CallOption) (*NewPaletteResponse, error) {
	out := new(NewPaletteResponse)
	err := grpc.Invoke(ctx, "/proto.EaselService/NewPalette", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easelServiceClient) DeletePalette(ctx context.Context, in *DeletePaletteRequest, opts ...grpc.CallOption) (*DeletePaletteResponse, error) {
	out := new(DeletePaletteResponse)
	err := grpc.Invoke(ctx, "/proto.EaselService/DeletePalette", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easelServiceClient) UpdatePalette(ctx context.Context, in *UpdatePaletteRequest, opts ...grpc.CallOption) (*UpdatePaletteResponse, error) {
	out := new(UpdatePaletteResponse)
	err := grpc.Invoke(ctx, "/proto.EaselService/UpdatePalette", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EaselService service

type EaselServiceServer interface {
	NewEasel(context.Context, *NewEaselRequest) (*NewEaselResponse, error)
	DeleteEasel(context.Context, *DeleteEaselRequest) (*DeleteEaselResponse, error)
	NewPalette(context.Context, *NewPaletteRequest) (*NewPaletteResponse, error)
	DeletePalette(context.Context, *DeletePaletteRequest) (*DeletePaletteResponse, error)
	UpdatePalette(context.Context, *UpdatePaletteRequest) (*UpdatePaletteResponse, error)
}

func RegisterEaselServiceServer(s *grpc.Server, srv EaselServiceServer) {
	s.RegisterService(&_EaselService_serviceDesc, srv)
}

func _EaselService_NewEasel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEaselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaselServiceServer).NewEasel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EaselService/NewEasel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaselServiceServer).NewEasel(ctx, req.(*NewEaselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaselService_DeleteEasel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEaselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaselServiceServer).DeleteEasel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EaselService/DeleteEasel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaselServiceServer).DeleteEasel(ctx, req.(*DeleteEaselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaselService_NewPalette_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPaletteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaselServiceServer).NewPalette(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EaselService/NewPalette",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaselServiceServer).NewPalette(ctx, req.(*NewPaletteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaselService_DeletePalette_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaletteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaselServiceServer).DeletePalette(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EaselService/DeletePalette",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaselServiceServer).DeletePalette(ctx, req.(*DeletePaletteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaselService_UpdatePalette_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaletteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaselServiceServer).UpdatePalette(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EaselService/UpdatePalette",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaselServiceServer).UpdatePalette(ctx, req.(*UpdatePaletteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EaselService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EaselService",
	HandlerType: (*EaselServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEasel",
			Handler:    _EaselService_NewEasel_Handler,
		},
		{
			MethodName: "DeleteEasel",
			Handler:    _EaselService_DeleteEasel_Handler,
		},
		{
			MethodName: "NewPalette",
			Handler:    _EaselService_NewPalette_Handler,
		},
		{
			MethodName: "DeletePalette",
			Handler:    _EaselService_DeletePalette_Handler,
		},
		{
			MethodName: "UpdatePalette",
			Handler:    _EaselService_UpdatePalette_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "easel_service.proto",
}

func init() { proto1.RegisterFile("easel_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x4f, 0x13, 0x41,
	0x10, 0xc7, 0xe1, 0x4a, 0x69, 0x99, 0x82, 0x6d, 0x07, 0xb0, 0xdb, 0x53, 0x93, 0xe6, 0x7c, 0xb0,
	0x0f, 0x58, 0x13, 0x8c, 0x8f, 0x3e, 0x54, 0xd0, 0x84, 0xc4, 0x34, 0xe4, 0x08, 0xbe, 0x92, 0x2d,
	0x37, 0xd5, 0x4b, 0xda, 0x6b, 0xdd, 0xdd, 0x82, 0xfe, 0xdd, 0x26, 0x3e, 0x9b, 0xdb, 0xdd, 0xfb,
	0xc9, 0x45, 0xfa, 0xc0, 0xd3, 0xdd, 0xce, 0x7c, 0xe7, 0xb3, 0x33, 0xb3, 0x33, 0x70, 0x48, 0x5c,
	0xd2, 0xfc, 0x46, 0x92, 0xb8, 0x0b, 0x6f, 0x69, 0xb4, 0x12, 0x4b, 0xb5, 0xc4, 0xba, 0xfe, 0x78,
	0x27, 0xd0, 0x9e, 0xd0, 0xfd, 0xe7, 0x58, 0xe0, 0xd3, 0xcf, 0x35, 0x49, 0x85, 0x7d, 0x68, 0x9a,
	0x80, 0x30, 0x60, 0xdb, 0x83, 0xed, 0xe1, 0x9e, 0xdf, 0xd0, 0xe7, 0x8b, 0xc0, 0x7b, 0x0b, 0x9d,
	0x4c, 0x2d, 0x57, 0xcb, 0x48, 0xd2, 0xff, 0xe4, 0xef, 0x00, 0xcf, 0x69, 0x4e, 0x8a, 0x36, 0xe5,
	0x1f, 0xc3, 0x61, 0x21, 0xc0, 0x5c, 0xe1, 0x8d, 0xa0, 0x3b, 0xa1, 0xfb, 0x4b, 0x3e, 0x27, 0xa5,
	0x68, 0x03, 0xcc, 0x04, 0x30, 0xaf, 0x7f, 0x34, 0x51, 0x7c, 0x05, 0xb0, 0x32, 0xea, 0xd8, 0xe9,
	0x68, 0xe7, 0x9e, 0xb5, 0x5c, 0x04, 0xde, 0x25, 0x1c, 0x99, 0xb4, 0x36, 0x4e, 0xe1, 0x31, 0x62,
	0x0f, 0x8e, 0x4b, 0x44, 0x5b, 0x6a, 0x17, 0xda, 0xdf, 0x48, 0x28, 0xfa, 0x35, 0x56, 0x4a, 0x84,
	0xd3, 0xb5, 0x22, 0x0f, 0xa1, 0x73, 0x1d, 0x85, 0xb3, 0xa5, 0x58, 0x64, 0xb6, 0x0f, 0xd0, 0x1a,
	0x0b, 0xc1, 0x7f, 0x7f, 0x5a, 0xcf, 0x66, 0x24, 0x10, 0x61, 0x27, 0xe2, 0x0b, 0xb2, 0x49, 0xe8,
	0xff, 0xd8, 0x16, 0x70, 0xc5, 0x99, 0x33, 0xa8, 0x0d, 0x1d, 0x5f, 0xff, 0x7b, 0x7f, 0x1c, 0x38,
	0xba, 0x5e, 0x05, 0xfc, 0xe9, 0x2a, 0xc1, 0xd7, 0x70, 0x70, 0xa7, 0x13, 0xbe, 0x91, 0x3f, 0x78,
	0x40, 0x82, 0xd5, 0xb4, 0x62, 0xdf, 0x18, 0xaf, 0xb4, 0x0d, 0xdf, 0x40, 0x7b, 0x26, 0xf8, 0xf7,
	0x05, 0x45, 0x2a, 0x91, 0xed, 0x68, 0xd9, 0xb3, 0xc4, 0x6c, 0x85, 0x27, 0xd0, 0x98, 0xea, 0x92,
	0x24, 0xab, 0x0f, 0x6a, 0xc3, 0xd6, 0x29, 0x9a, 0x71, 0x1d, 0xe5, 0xaa, 0xf5, 0x13, 0x09, 0xba,
	0xd0, 0x0c, 0xa3, 0x80, 0x6e, 0x43, 0x92, 0x6c, 0x77, 0x50, 0x1b, 0xd6, 0xfd, 0xf4, 0x8c, 0x67,
	0xd0, 0xb5, 0x79, 0x71, 0x21, 0x94, 0xee, 0x9a, 0x64, 0x0d, 0xcd, 0x7c, 0x6e, 0x99, 0xa5, 0x46,
	0xfb, 0x1d, 0x13, 0x30, 0x4e, 0xf5, 0x78, 0x0e, 0xdd, 0xb5, 0x69, 0x7d, 0x46, 0x61, 0x4d, 0x0d,
	0xe9, 0x59, 0x48, 0xf9, 0x69, 0xfc, 0x8e, 0x8d, 0x48, 0x31, 0xf1, 0x63, 0x97, 0x9a, 0x6e, 0x1e,
	0xfb, 0xf4, 0xaf, 0x03, 0xfb, 0x7a, 0xd2, 0xaf, 0xcc, 0x6a, 0xe2, 0x47, 0x68, 0x26, 0xfb, 0x85,
	0x49, 0x96, 0xa5, 0xf5, 0x74, 0x7b, 0x0f, 0xec, 0x76, 0x74, 0xb6, 0xf0, 0x0b, 0xb4, 0x72, 0xeb,
	0x83, 0x7d, 0xab, 0x7c, 0xb8, 0x83, 0xae, 0x5b, 0xe5, 0x4a, 0x39, 0x67, 0x00, 0xd9, 0xfe, 0x20,
	0xcb, 0x2e, 0x2c, 0x4e, 0x8d, 0xdb, 0xaf, 0xf0, 0xa4, 0x90, 0xaf, 0x70, 0x50, 0x18, 0x71, 0x7c,
	0x51, 0xb8, 0xb3, 0x84, 0x7a, 0x59, 0xed, 0xcc, 0xd3, 0x0a, 0x3d, 0x4c, 0x69, 0x55, 0xe3, 0x9c,
	0xd2, 0x2a, 0xdb, 0xee, 0x6d, 0x4d, 0x77, 0xb5, 0xfb, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x44, 0xc7, 0x7b, 0xad, 0x1a, 0x05, 0x00, 0x00,
}
