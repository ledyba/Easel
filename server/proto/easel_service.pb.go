// Code generated by protoc-gen-go.
// source: easel_service.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	easel_service.proto

It has these top-level messages:
	PrepareEaselRequest
	PrepareEaselResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type PrepareEaselRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PrepareEaselRequest) Reset()                    { *m = PrepareEaselRequest{} }
func (m *PrepareEaselRequest) String() string            { return proto1.CompactTextString(m) }
func (*PrepareEaselRequest) ProtoMessage()               {}
func (*PrepareEaselRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PrepareEaselRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PrepareEaselResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *PrepareEaselResponse) Reset()                    { *m = PrepareEaselResponse{} }
func (m *PrepareEaselResponse) String() string            { return proto1.CompactTextString(m) }
func (*PrepareEaselResponse) ProtoMessage()               {}
func (*PrepareEaselResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrepareEaselResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PrepareEaselResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PrepareEaselResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto1.RegisterType((*PrepareEaselRequest)(nil), "proto.PrepareEaselRequest")
	proto1.RegisterType((*PrepareEaselResponse)(nil), "proto.PrepareEaselResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EaselService service

type EaselServiceClient interface {
	PrepareEasel(ctx context.Context, in *PrepareEaselRequest, opts ...grpc.CallOption) (*PrepareEaselResponse, error)
}

type easelServiceClient struct {
	cc *grpc.ClientConn
}

func NewEaselServiceClient(cc *grpc.ClientConn) EaselServiceClient {
	return &easelServiceClient{cc}
}

func (c *easelServiceClient) PrepareEasel(ctx context.Context, in *PrepareEaselRequest, opts ...grpc.CallOption) (*PrepareEaselResponse, error) {
	out := new(PrepareEaselResponse)
	err := grpc.Invoke(ctx, "/proto.EaselService/PrepareEasel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EaselService service

type EaselServiceServer interface {
	PrepareEasel(context.Context, *PrepareEaselRequest) (*PrepareEaselResponse, error)
}

func RegisterEaselServiceServer(s *grpc.Server, srv EaselServiceServer) {
	s.RegisterService(&_EaselService_serviceDesc, srv)
}

func _EaselService_PrepareEasel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareEaselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaselServiceServer).PrepareEasel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EaselService/PrepareEasel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaselServiceServer).PrepareEasel(ctx, req.(*PrepareEaselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EaselService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EaselService",
	HandlerType: (*EaselServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareEasel",
			Handler:    _EaselService_PrepareEasel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "easel_service.proto",
}

func init() { proto1.RegisterFile("easel_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x4d, 0x2c, 0x4e,
	0xcd, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x05, 0x53, 0x4a, 0x9a, 0x5c, 0xc2, 0x01, 0x45, 0xa9, 0x05, 0x89, 0x45, 0xa9, 0xae, 0x20,
	0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x52, 0x1c, 0x97, 0x08, 0xaa, 0xd2, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xe2, 0xd2, 0xe4, 0xe4, 0xd4, 0xe2, 0x62,
	0xb0, 0x72, 0x8e, 0x20, 0x18, 0x17, 0x24, 0x93, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a, 0xc1,
	0x04, 0x36, 0x08, 0xc6, 0x85, 0x9b, 0xcf, 0x8c, 0x30, 0xdf, 0x28, 0x92, 0x8b, 0x07, 0x6c, 0x70,
	0x30, 0xc4, 0x9d, 0x42, 0x9e, 0x5c, 0x3c, 0xc8, 0xf6, 0x09, 0x49, 0x41, 0x5c, 0xae, 0x87, 0xc5,
	0xbd, 0x52, 0xd2, 0x58, 0xe5, 0x20, 0x0e, 0x54, 0x62, 0x48, 0x62, 0x03, 0xcb, 0x1a, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0xf5, 0xe7, 0xfb, 0x0a, 0x01, 0x00, 0x00,
}
